/* The following code was generated by JFlex 1.4.3 on 14-7-3 ÏÂÎç4:20 */

package com.jiuqi.dna.core.impl;

import java.io.IOException;
import com.jiuqi.dna.core.spi.sql.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-7-3 ÏÂÎç4:20 from the specification file
 * <tt>C:/dnasql.flex</tt>
 */
public final class SQLLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int QUOTED_ID = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 6;
  public static final int STR = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\11\2\0\1\11\22\0\1\60\1\0\1\13\1\10"+
    "\1\0\1\24\1\0\1\12\1\25\1\26\1\22\1\21\1\17\1\4"+
    "\1\2\1\23\12\1\1\0\1\27\1\15\1\16\1\14\1\0\1\7"+
    "\1\42\1\47\1\52\1\30\1\3\1\31\1\44\1\55\1\32\1\56"+
    "\1\57\1\50\1\41\1\33\1\40\1\43\1\34\1\36\1\51\1\46"+
    "\1\35\1\45\1\54\1\53\1\37\1\5\4\0\1\6\1\0\1\42"+
    "\1\47\1\52\1\30\1\3\1\31\1\44\1\55\1\32\1\56\1\57"+
    "\1\50\1\41\1\33\1\40\1\43\1\34\1\36\1\51\1\46\1\35"+
    "\1\45\1\54\1\53\1\37\1\5\1\0\1\20\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\2\2\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\2\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\26\5\1\24\1\25\1\26\1\24\1\27\1\1\1\30"+
    "\2\0\4\5\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\12\5\1\40\1\41\1\42\15\5\1\43\1\44"+
    "\1\5\1\45\7\5\1\46\7\5\1\47\5\5\1\50"+
    "\24\5\1\51\1\52\2\53\1\0\1\54\20\5\1\55"+
    "\5\5\1\56\3\5\1\57\11\5\1\60\3\5\1\61"+
    "\1\5\1\62\1\5\1\63\1\5\1\64\1\5\1\65"+
    "\1\66\1\5\1\67\1\70\1\5\1\71\1\72\6\5"+
    "\1\73\21\5\1\74\1\5\1\75\23\5\1\76\1\5"+
    "\1\77\1\100\7\5\1\101\2\5\1\102\2\5\1\103"+
    "\1\104\6\5\1\105\2\5\1\106\17\5\1\107\1\5"+
    "\1\110\1\5\1\111\13\5\1\112\5\5\1\113\1\114"+
    "\1\5\1\115\4\5\1\116\1\5\1\117\1\120\1\121"+
    "\1\122\1\123\11\5\1\124\1\5\1\125\1\126\1\127"+
    "\3\5\1\130\2\5\1\131\17\5\1\132\1\133\1\5"+
    "\1\134\3\5\1\135\1\136\1\137\1\5\1\140\2\5"+
    "\1\141\3\5\1\142\2\5\1\143\1\144\7\5\1\145"+
    "\4\5\1\146\2\5\1\147\1\5\1\150\1\151\2\5"+
    "\1\152\1\153\4\5\1\154\2\5\1\155\3\5\1\156"+
    "\1\157\1\160\3\5\1\161\1\162\1\163\1\164\2\5"+
    "\1\165\2\5\1\166\1\167\4\5\1\170\2\5\1\171"+
    "\1\5\1\172\1\173\1\174\2\5\1\175\16\5\1\176"+
    "\1\5\1\177\1\5\1\200\1\201\7\5\1\202\1\5"+
    "\1\203\4\5\1\204\1\5\1\205\1\206\10\5\1\207"+
    "\5\5\1\210\4\5\1\211\1\212\1\213\1\5\1\214"+
    "\1\5\1\215\1\5\1\216\4\5\1\217\1\220\1\5"+
    "\1\221\2\5\1\222\1\223\2\5\1\224\1\225\1\226"+
    "\1\5\1\227\2\5\1\230\3\5\1\231\1\232\1\5"+
    "\1\233\2\5\1\234\1\235\1\236\1\237\1\240\2\5"+
    "\1\241\1\242\1\243\1\244\2\5\1\245\1\5\1\246"+
    "\1\247\3\5\1\250\1\251\1\252";

  private static int [] zzUnpackAction() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\304\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\304\0\304\0\u024c"+
    "\0\u027d\0\304\0\304\0\u02ae\0\304\0\304\0\304\0\304"+
    "\0\304\0\304\0\304\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\304"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\304\0\u0961"+
    "\0\u0992\0\304\0\304\0\304\0\304\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0188"+
    "\0\u0bad\0\u0188\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0188"+
    "\0\u0188\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u0188\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\304\0\304\0\u1696"+
    "\0\u16c7\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u0188\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u0188\0\u1f02\0\u0188"+
    "\0\u1f33\0\u0188\0\u1f64\0\u1f95\0\u0188\0\u1fc6\0\u0188\0\u0188"+
    "\0\u1ff7\0\u0188\0\u0188\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec"+
    "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u248f\0\u0188\0\u24c0\0\u0188\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832"+
    "\0\u2863\0\u0188\0\u2894\0\u0188\0\u0188\0\u28c5\0\u28f6\0\u2927"+
    "\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u0188"+
    "\0\u2aaf\0\u2ae0\0\u0188\0\u0188\0\u2b11\0\u2b42\0\u2b73\0\u2ba4"+
    "\0\u2bd5\0\u2c06\0\u0188\0\u2c37\0\u2c68\0\u0188\0\u2c99\0\u2cca"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u0188\0\u2f78\0\u0188"+
    "\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100"+
    "\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u0188\0\u3226\0\u3257"+
    "\0\u3288\0\u32b9\0\u32ea\0\u0188\0\u0188\0\u331b\0\u0188\0\u334c"+
    "\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u0188\0\u0188\0\u0188"+
    "\0\u0188\0\u0188\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\u3598\0\u35c9\0\u35fa\0\u0188\0\u362b\0\u0188\0\u0188\0\u0188"+
    "\0\u365c\0\u368d\0\u36be\0\u0188\0\u36ef\0\u3720\0\u0188\0\u3751"+
    "\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9"+
    "\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u0188\0\u0188"+
    "\0\u3a30\0\u0188\0\u3a61\0\u3a92\0\u3ac3\0\u0188\0\u0188\0\u0188"+
    "\0\u3af4\0\u0188\0\u3b25\0\u3b56\0\u0188\0\u3b87\0\u3bb8\0\u3be9"+
    "\0\u0188\0\u3c1a\0\u3c4b\0\u0188\0\u0188\0\u3c7c\0\u3cad\0\u3cde"+
    "\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u0188\0\u3dd3\0\u3e04\0\u3e35"+
    "\0\u3e66\0\u0188\0\u3e97\0\u3ec8\0\u0188\0\u3ef9\0\u0188\0\u0188"+
    "\0\u3f2a\0\u3f5b\0\u0188\0\u0188\0\u3f8c\0\u3fbd\0\u3fee\0\u401f"+
    "\0\u0188\0\u4050\0\u4081\0\u0188\0\u40b2\0\u40e3\0\u4114\0\u0188"+
    "\0\u0188\0\u0188\0\u4145\0\u4176\0\u41a7\0\u0188\0\u0188\0\u0188"+
    "\0\u0188\0\u41d8\0\u4209\0\u0188\0\u423a\0\u426b\0\u0188\0\u0188"+
    "\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u0188\0\u4360\0\u4391\0\u0188"+
    "\0\u43c2\0\u0188\0\u43f3\0\u0188\0\u4424\0\u4455\0\u0188\0\u4486"+
    "\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e"+
    "\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u0188\0\u4734\0\u0188"+
    "\0\u4765\0\u0188\0\u0188\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a"+
    "\0\u488b\0\u48bc\0\u0188\0\u48ed\0\u0188\0\u491e\0\u494f\0\u4980"+
    "\0\u49b1\0\u0188\0\u49e2\0\u0188\0\u0188\0\u4a13\0\u4a44\0\u4a75"+
    "\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u0188\0\u4b9b\0\u4bcc"+
    "\0\u4bfd\0\u4c2e\0\u4c5f\0\u0188\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23"+
    "\0\u0188\0\u0188\0\u0188\0\u4d54\0\u0188\0\u4d85\0\u0188\0\u4db6"+
    "\0\u0188\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u0188\0\u0188\0\u4eab"+
    "\0\u0188\0\u4edc\0\u4f0d\0\u4f3e\0\u0188\0\u4f6f\0\u4fa0\0\u0188"+
    "\0\u0188\0\u0188\0\u4fd1\0\u0188\0\u5002\0\u5033\0\u0188\0\u5064"+
    "\0\u5095\0\u50c6\0\u0188\0\u0188\0\u50f7\0\u0188\0\u5128\0\u5159"+
    "\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u518a\0\u51bb\0\u0188"+
    "\0\u0188\0\u0188\0\u0188\0\u51ec\0\u521d\0\u0188\0\u524e\0\u0188"+
    "\0\u0188\0\u527f\0\u52b0\0\u52e1\0\u0188\0\u0188\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\12"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\12\1\56\1\57\1\60\1\61"+
    "\1\15\11\62\1\63\1\64\46\62\13\65\1\66\45\65"+
    "\11\67\1\70\47\67\62\0\1\6\1\71\1\72\56\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\73"+
    "\14\12\1\74\1\75\1\12\1\76\4\12\5\0\1\77"+
    "\55\0\1\12\1\0\1\12\1\0\2\12\21\0\30\12"+
    "\4\0\1\100\1\0\1\100\22\0\30\100\4\0\1\101"+
    "\1\0\1\101\22\0\30\101\12\0\1\15\46\0\1\15"+
    "\16\0\1\102\56\0\1\103\1\0\1\104\62\0\1\105"+
    "\41\0\1\12\1\0\1\106\1\0\2\12\21\0\2\12"+
    "\1\107\5\12\1\110\1\12\1\111\15\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\2\12\1\112\2\12"+
    "\1\113\1\114\1\12\1\115\1\12\1\116\5\12\1\117"+
    "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\1\12\1\120\1\12\1\121\15\12\1\122\6\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\123"+
    "\2\12\1\124\4\12\1\125\1\126\3\12\1\127\5\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\5\12"+
    "\1\130\22\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\131\7\12\1\132\5\12\1\133\6\12"+
    "\2\0\1\12\1\0\1\134\1\0\2\12\21\0\2\12"+
    "\1\135\5\12\1\136\1\12\1\137\15\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\1\12\1\140\1\12"+
    "\1\141\1\12\1\142\1\143\6\12\1\144\12\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\2\12\1\145"+
    "\7\12\1\146\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\3\12\1\147\11\12\1\150\1\12\1\151"+
    "\1\152\1\153\6\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\6\12\1\154\3\12\1\155\15\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\156"+
    "\1\157\21\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\12\12\1\160\15\12\2\0\1\12\1\0\1\161"+
    "\1\0\2\12\21\0\6\12\1\162\1\12\1\163\1\12"+
    "\1\164\12\12\1\165\2\12\2\0\1\12\1\0\1\166"+
    "\1\0\2\12\21\0\2\12\1\167\3\12\1\170\1\171"+
    "\1\172\7\12\1\173\7\12\2\0\1\12\1\0\1\174"+
    "\1\0\2\12\21\0\2\12\1\175\5\12\1\176\17\12"+
    "\2\0\1\12\1\0\1\177\1\0\2\12\21\0\5\12"+
    "\1\200\10\12\1\201\6\12\1\202\2\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\5\12\1\203\2\12"+
    "\1\204\1\12\1\205\12\12\1\206\2\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\2\12\1\207\22\12"+
    "\1\210\2\12\2\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\211\21\0\2\12\1\212\7\12\1\213\15\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\10\12\1\214"+
    "\17\12\2\0\1\12\1\0\1\215\1\0\2\12\21\0"+
    "\30\12\1\0\11\62\2\0\46\62\11\0\1\63\61\0"+
    "\1\216\46\0\13\65\1\0\45\65\13\0\1\217\45\0"+
    "\11\67\1\0\47\67\1\0\1\220\60\0\1\221\2\0"+
    "\1\222\55\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\1\223\4\12\1\224\22\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\21\12\1\225\6\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\22\12\1\226\5\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\2\12"+
    "\1\227\13\12\1\230\11\12\2\0\1\100\1\0\1\100"+
    "\1\0\2\100\21\0\30\100\2\0\1\101\1\0\1\101"+
    "\1\0\2\101\21\0\30\101\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\1\12\1\231\1\12\1\232\14\12"+
    "\1\233\1\234\6\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\21\12\1\235\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\5\12\1\236\22\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\237"+
    "\11\12\2\0\1\12\1\0\1\240\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\3\12\1\241\14\12\1\242\7\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\10\12\1\243\17\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\6\12\1\244"+
    "\11\12\1\245\7\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\20\12\1\246\7\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\10\12\1\247\17\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\1\250\7\12"+
    "\1\251\5\12\1\252\2\12\1\253\6\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\11\12\1\254\6\12"+
    "\1\255\7\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\16\12\1\256\11\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\12\12\1\257\15\12\2\0\1\12"+
    "\1\0\1\260\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\25\12\1\261\2\12"+
    "\2\0\1\12\1\0\1\262\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\2\12"+
    "\1\263\14\12\1\264\10\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\1\265\27\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\2\12\1\266\25\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\267"+
    "\1\12\1\270\1\12\1\271\5\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\14\12\1\272\13\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\273"+
    "\3\12\1\274\3\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\3\12\1\275\24\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\16\12\1\276\11\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\1\277\10\12"+
    "\1\300\16\12\2\0\1\12\1\0\1\301\1\0\2\12"+
    "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\302\24\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\13\12\1\303\7\12\1\304\4\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\1\305"+
    "\21\12\1\306\5\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\14\12\1\307\13\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\10\12\1\310\10\12\1\311"+
    "\6\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\20\12\1\312\7\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\22\12\1\313\5\12\2\0\1\12\1\0"+
    "\1\314\1\0\2\12\21\0\2\12\1\315\5\12\1\316"+
    "\17\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\6\12\1\317\21\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\2\12\1\320\25\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\10\12\1\321\17\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\6\12\1\322"+
    "\6\12\1\323\2\12\1\324\7\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\23\12\1\325\4\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\326"+
    "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\17\12\1\327\10\12\2\0\1\12\1\0\1\330\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\14\12\1\331\1\12\1\332\11\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\333"+
    "\24\12\2\0\1\12\1\0\1\334\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\16\12\1\335\11\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\10\12\1\336\17\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\10\12\1\337\17\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\1\12\1\340"+
    "\26\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\27\12\1\341\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\342\4\12\1\343\17\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\344\1\12"+
    "\1\345\7\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\11\12\1\346\16\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\6\12\1\347\3\12\1\350\15\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\10\12"+
    "\1\351\17\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\352\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\353\1\12\1\354\3\12"+
    "\1\355\1\356\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\21\12\1\357\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\2\12\1\360\7\12\1\361"+
    "\15\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\16\12\1\362\11\12\2\0\1\12\1\0\1\363\1\0"+
    "\2\12\21\0\2\12\1\364\25\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\12\12\1\365\5\12\1\366"+
    "\7\12\2\0\1\12\1\0\1\367\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\15\12\1\370\12\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\2\12\1\371\25\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\7\12\1\372\20\12\2\0"+
    "\1\220\1\0\1\72\56\0\1\221\60\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\21\12\1\373\6\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\11\12\1\374"+
    "\16\12\2\0\1\12\1\0\1\375\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\12\12\1\376\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\21\12\1\377\6\12\2\0\1\12\1\0"+
    "\1\u0100\1\0\2\12\21\0\30\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\2\12\1\u0101\7\12\1\u0102"+
    "\15\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\21\12\1\u0103\6\12\2\0\1\12\1\0\1\u0104\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\22\12\1\u0105\5\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\16\12\1\u0106\11\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\17\12\1\u0107"+
    "\10\12\2\0\1\12\1\0\1\u0108\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\20\12\1\u0109\7\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\22\12\1\u010a\5\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\20\12\1\u010b\7\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\11\12\1\u010c"+
    "\16\12\2\0\1\12\1\0\1\u010d\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\20\12\1\u010e\7\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\21\12\1\u010f\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\12\12\1\u0110\15\12\2\0"+
    "\1\12\1\0\1\u0111\1\0\2\12\21\0\30\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\u0112"+
    "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\10\12\1\u0113\17\12\2\0\1\12\1\0\1\u0114\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\u0115\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\20\12\1\u0116\7\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\6\12\1\u0117\21\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\23\12\1\u0118"+
    "\4\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\12\12\1\u0119\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\6\12\1\u011a\21\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\4\12\1\u011b\3\12\1\u011c"+
    "\17\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\10\12\1\u011d\17\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\12\12\1\u011e\15\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\3\12\1\u011f\24\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\u0120"+
    "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\12\12\1\u0121\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\10\12\1\u0122\17\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\25\12\1\u0123\2\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\u0124"+
    "\7\12\2\0\1\12\1\0\1\12\1\0\1\12\1\u0125"+
    "\21\0\21\12\1\u0126\6\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\14\12\1\u0127\12\12\1\u0128\2\0"+
    "\1\12\1\0\1\u0129\1\0\2\12\21\0\30\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\6\12\1\u012a"+
    "\21\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\13\12\1\u012b\14\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\20\12\1\u012c\1\12\1\u012d\5\12\2\0"+
    "\1\12\1\0\1\u012e\1\0\2\12\21\0\30\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\u012f"+
    "\11\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\22\12\1\u0130\5\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\3\12\1\u0131\5\12\1\u0132\16\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u0133"+
    "\5\12\2\0\1\12\1\0\1\u0134\1\0\2\12\21\0"+
    "\16\12\1\u0135\11\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\1\u0136\27\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\5\12\1\u0137\22\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\17\12\1\u0138\2\12"+
    "\1\u0139\5\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\20\12\1\u013a\7\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\5\12\1\u013b\22\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u013c\11\12"+
    "\2\0\1\12\1\0\1\u013d\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\20\12"+
    "\1\u013e\7\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\u013f\24\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\2\12\1\u0140\25\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\24\12\1\u0141\3\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\12\12"+
    "\1\u0142\15\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\12\12\1\u0143\15\12\2\0\1\12\1\0\1\u0144"+
    "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\20\12\1\u0145\7\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\17\12\1\u0146\10\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"+
    "\1\u0147\11\12\2\0\1\12\1\0\1\u0148\1\0\2\12"+
    "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\14\12\1\u0149\13\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\13\12\1\u014a\14\12\2\0\1\12"+
    "\1\0\1\u014b\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\2\12\1\u014c\25\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"+
    "\1\u014d\21\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u014e\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\6\12\1\u014f\21\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u0150\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"+
    "\1\u0151\24\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\11\12\1\u0152\16\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\20\12\1\u0153\7\12\2\0\1\12"+
    "\1\0\1\u0154\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\20\12\1\u0155\7\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"+
    "\1\u0156\21\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\25\12\1\u0157\2\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\u0158\2\12\1\u0159\21\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\20\12"+
    "\1\u015a\7\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\2\12\1\u015b\25\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\15\12\1\u015c\12\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\6\12\1\u015d\21\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\2\12"+
    "\1\u015e\25\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\u015f\24\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\u0160\21\0\30\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\13\12\1\u0161\14\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\u0162"+
    "\11\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\3\12\1\u0163\24\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\3\12\1\u0164\24\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\5\12\1\u0165\22\12\2\0"+
    "\1\12\1\0\1\u0166\1\0\2\12\21\0\30\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\u0167"+
    "\11\12\2\0\1\12\1\0\1\u0168\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\2\12\1\u0169\25\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\20\12\1\u016a\7\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\1\u016b\27\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u016c\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\12\12"+
    "\1\u016d\15\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\10\12\1\u016e\17\12\2\0\1\12\1\0\1\u016f"+
    "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u0170\11\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\23\12\1\u0171\4\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"+
    "\1\u0172\11\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u0173\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\6\12\1\u0174\21\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\22\12\1\u0175\5\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"+
    "\1\u0176\11\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u0177\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\7\12\1\u0178\20\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\5\12\1\u0179\22\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"+
    "\1\u017a\24\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\5\12\1\u017b\22\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u017c\11\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\14\12\1\u017d\13\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"+
    "\1\u017e\21\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\16\12\1\u017f\11\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\6\12\1\u0180\21\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u0181\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\5\12"+
    "\1\u0182\22\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\u0183\24\12\2\0\1\12\1\0\1\u0184"+
    "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\6\12\1\u0185\21\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\6\12\1\u0186\21\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\2\12"+
    "\1\u0187\25\12\2\0\1\12\1\0\1\u0188\1\0\2\12"+
    "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\10\12\1\u0189\17\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\21\12\1\u018a\6\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\6\12\1\u018b\21\12"+
    "\2\0\1\12\1\0\1\u018c\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"+
    "\1\u018d\11\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\12\12\1\u018e\15\12\2\0\1\12\1\0\1\u018f"+
    "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\u0190\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\2\12\1\u0191\25\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\13\12"+
    "\1\u0192\14\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\2\12\1\u0193\25\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\25\12\1\u0194\2\12\2\0\1\12"+
    "\1\0\1\u0195\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\u0196\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\u0197\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\3\12\1\u0198\24\12"+
    "\2\0\1\12\1\0\1\u0199\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"+
    "\1\u019a\21\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\27\12\1\u019b\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\21\12\1\u019c\6\12\2\0\1\12\1\0"+
    "\1\u019d\1\0\2\12\21\0\30\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\22\12\1\u019e\5\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\u019f"+
    "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\16\12\1\u01a0\11\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\16\12\1\u01a1\11\12\2\0\1\12\1\0"+
    "\1\u01a2\1\0\2\12\21\0\30\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\12\12\1\u01a3\15\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\u01a4"+
    "\11\12\2\0\1\12\1\0\1\u01a5\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\u01a6\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\1\u01a7\27\12\2\0\1\12\1\0\1\u01a8\1\0\2\12"+
    "\21\0\30\12\2\0\1\12\1\0\1\u01a9\1\0\2\12"+
    "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\1\u01aa\27\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\12\12\1\u01ab\15\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\3\12\1\u01ac\24\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\24\12\1\u01ad"+
    "\3\12\2\0\1\12\1\0\1\u01ae\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\21\12\1\u01af\6\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\1\u01b0\27\12\2\0\1\12\1\0\1\u01b1"+
    "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\20\12\1\u01b2\7\12\2\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\u01b3\21\0\30\12\2\0"+
    "\1\12\1\0\1\u01b4\1\0\2\12\21\0\30\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\u01b5"+
    "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\3\12\1\u01b6\24\12\2\0\1\12\1\0\1\u01b7\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\21\12\1\u01b8\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\2\12\1\u01b9\25\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u01ba"+
    "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\24\12\1\u01bb\3\12\2\0\1\12\1\0\1\u01bc\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\16\12\1\u01bd\11\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\2\12\1\u01be\25\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\25\12\1\u01bf"+
    "\2\12\2\0\1\12\1\0\1\u01c0\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\3\12\1\u01c1\24\12\2\0\1\12\1\0\1\u01c2\1\0"+
    "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\3\12\1\u01c3\24\12\2\0\1\12\1\0"+
    "\1\u01c4\1\0\2\12\21\0\2\12\1\u01c5\25\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\1\u01c6\27\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\13\12"+
    "\1\u01c7\14\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\5\12\1\u01c8\22\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\2\12\1\u01c9\25\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\3\12\1\u01ca\24\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\15\12"+
    "\1\u01cb\12\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\5\12\1\u01cc\22\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u01cd\11\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\12\12\1\u01ce\15\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\1\u01cf"+
    "\27\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\6\12\1\u01d0\21\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\1\u01d1\27\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u01d2\11\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u01d3\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"+
    "\1\u01d4\24\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\12\12\1\u01d5\15\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\21\12\1\u01d6\6\12\2\0\1\12"+
    "\1\0\1\u01d7\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\7\12\1\u01d8\20\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\12\12"+
    "\1\u01d9\15\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\16\12\1\u01da\11\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\14\12\1\u01db\13\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\21\12\1\u01dc\6\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"+
    "\1\u01dd\24\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\2\12\1\u01de\25\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\u01df\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\21\12\1\u01e0\6\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\10\12"+
    "\1\u01e1\17\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u01e2\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\14\12\1\u01e3\13\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\2\12\1\u01e4\25\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"+
    "\1\u01e5\11\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u01e6\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\1\u01e7\27\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\22\12\1\u01e8\5\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\10\12\1\u01e9"+
    "\17\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\25\12\1\u01ea\2\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\2\12\1\u01eb\25\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\21\12\1\u01ec\6\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u01ed"+
    "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\12\12\1\u01ee\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\1\u01ef\27\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\2\12\1\u01f0\25\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\10\12\1\u01f1\4\12"+
    "\1\u01f2\12\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\21\12\1\u01f3\6\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\11\12\1\u01f4\16\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\1\u01f5\27\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\14\12\1\u01f6"+
    "\13\12\2\0\1\12\1\0\1\u01f7\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\3\12\1\u01f8\24\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\10\12\1\u01f9\17\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\22\12\1\u01fa\5\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\2\12\1\u01fb"+
    "\25\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\7\12\1\u01fc\20\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\5\12\1\u01fd\22\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\10\12\1\u01fe\17\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\2\12\1\u01ff"+
    "\25\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\12\12\1\u0200\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\6\12\1\u0201\21\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\3\12\1\u0202\24\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\u0203"+
    "\24\12\2\0\1\12\1\0\1\12\1\0\1\12\1\u0204"+
    "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\16\12\1\u0205\11\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\u0206\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u0207\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\22\12"+
    "\1\u0208\5\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\1\12\1\u0209\26\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\22\12\1\u020a\5\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u020b\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\12\12"+
    "\1\u020c\15\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\12\12\1\u020d\15\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u020e\11\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\3\12\1\u020f\24\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"+
    "\1\u0210\24\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u0211\21\12\2\0\1\12\1\0\1\u0212"+
    "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\u0213\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\3\12\1\u0214\24\12"+
    "\2\0\1\12\1\0\1\u0215\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\u0216\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\17\12"+
    "\1\u0217\10\12\2\0\1\12\1\0\1\u0218\1\0\2\12"+
    "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\20\12\1\u0219\7\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u021a\11\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\6\12\1\u021b\21\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"+
    "\1\u021c\11\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\3\12\1\u021d\24\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\6\12\1\u021e\21\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\1\12\1\u021f\26\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\10\12"+
    "\1\u0220\17\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\6\12\1\u0221\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\24\12\1\u0222\3\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\21\12\1\u0223\6\12"+
    "\2\0\1\12\1\0\1\u0224\1\0\2\12\21\0\30\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\25\12"+
    "\1\u0225\2\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\25\12\1\u0226\2\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\3\12\1\u0227\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\3\12\1\u0228\24\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\14\12"+
    "\1\u0229\13\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\1\u022a\27\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\14\12\1\u022b\13\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\21\12\1\u022c\6\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\u022d"+
    "\11\12\2\0\1\12\1\0\1\u022e\1\0\2\12\21\0"+
    "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\10\12\1\u022f\17\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\14\12\1\u0230\13\12\2\0\1\12\1\0"+
    "\1\u0231\1\0\2\12\21\0\30\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\3\12\1\u0232\24\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\21\0\7\12\1\u0233"+
    "\20\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"+
    "\2\12\1\u0234\25\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\21\0\2\12\1\u0235\25\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\21\0\27\12\1\u0236\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\16\12\1\u0237\11\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"+
    "\1\u0238\21\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\1\12\1\u0239\26\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\16\12\1\u023a\11\12\2\0\1\12"+
    "\1\0\1\u023b\1\0\2\12\21\0\30\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\21\0\10\12\1\u023c\17\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\25\12"+
    "\1\u023d\2\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\21\0\21\12\1\u023e\6\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\21\0\1\12\1\u023f\26\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21266];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\1\1\1\11\6\1\2\11\2\1"+
    "\2\11\1\1\7\11\34\1\1\11\2\0\4\1\1\11"+
    "\2\1\4\11\110\1\2\11\2\1\1\0\u01ad\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public Token val;

private StringBuilder sb = new StringBuilder();
private int strColumn;

public int read() {
    try {
    	this.val = null;
        return yylex();
    } catch (IOException ioe) {
        throw new IllegalStateException(ioe);
    }
}

private int HIERARCHY(int t, NHierarchyExpr.Keywords keyword) {
	this.val = new THierarchy(keyword, yyline, yycolumn, yylength());
	return t;
}

private int VALUECOMPARE(int t, NCompareExpr.Operator op) {
	this.val = new TValueCompare(op, yyline, yycolumn, yylength());
	return t;
}

private int STRCOMPARE(int t, NStrCompareExpr.Keywords keyword) {
	this.val = new TStrCompare(keyword, yyline, yycolumn, yylength());
	return t;
}

private int KEYWORD(int t) {
	this.val = new Token(yyline, yycolumn, yylength());
	return t;
}

private int IDENTIFIER(String value) {
	this.val = new TString(value, yyline, yycolumn, yylength());
	return SQLParser.ID;
}

private int STRING(String value) {
	this.val = new TString(value, yyline, yycolumn, yylength());
	return SQLParser.STR_VAL;
}

private int BOOLEAN(int t, boolean value) {
	this.val = new TBoolean(value, yyline, yycolumn, yylength());
	return t;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SQLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 95: 
          { return KEYWORD(SQLParser.QUERY);
          }
        case 171: break;
        case 91: 
          { return KEYWORD(SQLParser.FLOAT);
          }
        case 172: break;
        case 2: 
          { throw new SQLTokenUndefinedException(yyline, yycolumn, yytext());
          }
        case 173: break;
        case 164: 
          { return KEYWORD(SQLParser.VARBINARY);
          }
        case 174: break;
        case 153: 
          { return STRCOMPARE(SQLParser.CONTAINS, NStrCompareExpr.Keywords.CONTAINS);
          }
        case 175: break;
        case 20: 
          { sb.append(yytext());
          }
        case 176: break;
        case 123: 
          { return KEYWORD(SQLParser.RETURN);
          }
        case 177: break;
        case 66: 
          { return KEYWORD(SQLParser.DATE);
          }
        case 178: break;
        case 76: 
          { return BOOLEAN(SQLParser.FALSE, true);
          }
        case 179: break;
        case 42: 
          { sb.append("\"");
          }
        case 180: break;
        case 59: 
          { return KEYWORD(SQLParser.VAR);
          }
        case 181: break;
        case 31: 
          { return KEYWORD(SQLParser.CB);
          }
        case 182: break;
        case 8: 
          { sb.setLength(0); strColumn = yycolumn; yybegin(QUOTED_ID);
          }
        case 183: break;
        case 6: 
          { return KEYWORD('-');
          }
        case 184: break;
        case 85: 
          { return KEYWORD(SQLParser.CHAR);
          }
        case 185: break;
        case 169: 
          { return KEYWORD(SQLParser.HIERARCHIES);
          }
        case 186: break;
        case 27: 
          { this.val = new TString(yytext(), yyline, yycolumn, yylength());
		return SQLParser.ENV_REF;
          }
        case 187: break;
        case 148: 
          { return KEYWORD(SQLParser.OVERRIDE);
          }
        case 188: break;
        case 73: 
          { return KEYWORD(SQLParser.OVER);
          }
        case 189: break;
        case 99: 
          { return KEYWORD(SQLParser.RANGE);
          }
        case 190: break;
        case 19: 
          { return KEYWORD(';');
          }
        case 191: break;
        case 48: 
          { return KEYWORD(SQLParser.REL);
          }
        case 192: break;
        case 39: 
          { return KEYWORD(SQLParser.TO);
          }
        case 193: break;
        case 55: 
          { return KEYWORD(SQLParser.AVG);
          }
        case 194: break;
        case 40: 
          { return KEYWORD(SQLParser.BY);
          }
        case 195: break;
        case 87: 
          { return KEYWORD(SQLParser.WHEN);
          }
        case 196: break;
        case 24: 
          { yybegin(YYINITIAL);
          }
        case 197: break;
        case 86: 
          { return KEYWORD(SQLParser.WITH);
          }
        case 198: break;
        case 163: 
          { return KEYWORD(SQLParser.PARTITION);
          }
        case 199: break;
        case 140: 
          { return KEYWORD(SQLParser.CURRENT);
          }
        case 200: break;
        case 154: 
          { return KEYWORD(SQLParser.COALESCE);
          }
        case 201: break;
        case 141: 
          { return KEYWORD(SQLParser.COMMENT);
          }
        case 202: break;
        case 18: 
          { return KEYWORD(')');
          }
        case 203: break;
        case 122: 
          { return KEYWORD(SQLParser.UPDATE);
          }
        case 204: break;
        case 144: 
          { return KEYWORD(SQLParser.FUNCTION);
          }
        case 205: break;
        case 133: 
          { return KEYWORD(SQLParser.INDEXES);
          }
        case 206: break;
        case 113: 
          { return KEYWORD(SQLParser.ESCAPE);
          }
        case 207: break;
        case 88: 
          { return KEYWORD(SQLParser.H_LV);
          }
        case 208: break;
        case 71: 
          { return KEYWORD(SQLParser.ROWS);
          }
        case 209: break;
        case 25: 
          { yybegin(COMMENT);
          }
        case 210: break;
        case 41: 
          { sb.append("'");
          }
        case 211: break;
        case 158: 
          { return KEYWORD(SQLParser.RETURNING);
          }
        case 212: break;
        case 33: 
          { return KEYWORD(SQLParser.IN);
          }
        case 213: break;
        case 30: 
          { return VALUECOMPARE(SQLParser.LE, NCompareExpr.Operator.LE);
          }
        case 214: break;
        case 121: 
          { return KEYWORD(SQLParser.UNIQUE);
          }
        case 215: break;
        case 51: 
          { return KEYWORD(SQLParser.ORM);
          }
        case 216: break;
        case 75: 
          { return KEYWORD(SQLParser.TEXT);
          }
        case 217: break;
        case 9: 
          { return VALUECOMPARE('>', NCompareExpr.Operator.GT);
          }
        case 218: break;
        case 4: 
          { return KEYWORD('.');
          }
        case 219: break;
        case 111: 
          { return KEYWORD(SQLParser.WHILE);
          }
        case 220: break;
        case 28: 
          { return VALUECOMPARE(SQLParser.GE, NCompareExpr.Operator.GE);
          }
        case 221: break;
        case 100: 
          { return KEYWORD(SQLParser.ORDER);
          }
        case 222: break;
        case 74: 
          { return KEYWORD(SQLParser.GUID);
          }
        case 223: break;
        case 72: 
          { return KEYWORD(SQLParser.RANK);
          }
        case 224: break;
        case 80: 
          { return KEYWORD(SQLParser.LEFT);
          }
        case 225: break;
        case 167: 
          { return HIERARCHY(SQLParser.ANCESTOROF, NHierarchyExpr.Keywords.ANCESTOROF);
          }
        case 226: break;
        case 32: 
          { return KEYWORD(SQLParser.IF);
          }
        case 227: break;
        case 114: 
          { return KEYWORD(SQLParser.EXISTS);
          }
        case 228: break;
        case 47: 
          { return KEYWORD(SQLParser.NOT);
          }
        case 229: break;
        case 16: 
          { return KEYWORD('%');
          }
        case 230: break;
        case 117: 
          { return KEYWORD(SQLParser.DELETE);
          }
        case 231: break;
        case 105: 
          { return KEYWORD(SQLParser.BEGIN);
          }
        case 232: break;
        case 107: 
          { return KEYWORD(SQLParser.BYTES);
          }
        case 233: break;
        case 50: 
          { return KEYWORD(SQLParser.OUT);
          }
        case 234: break;
        case 143: 
          { return KEYWORD(SQLParser.DISTINCT);
          }
        case 235: break;
        case 120: 
          { return KEYWORD(SQLParser.INSERT);
          }
        case 236: break;
        case 116: 
          { return KEYWORD(SQLParser.DEFINE);
          }
        case 237: break;
        case 138: 
          { return KEYWORD(SQLParser.BETWEEN);
          }
        case 238: break;
        case 155: 
          { return STRCOMPARE(SQLParser.ENDS_WITH, NStrCompareExpr.Keywords.ENDS_WITH);
          }
        case 239: break;
        case 52: 
          { return KEYWORD(SQLParser.MIN);
          }
        case 240: break;
        case 77: 
          { return KEYWORD(SQLParser.THEN);
          }
        case 241: break;
        case 152: 
          { return HIERARCHY(SQLParser.PARENTOF, NHierarchyExpr.Keywords.PARENTOF);
          }
        case 242: break;
        case 108: 
          { return KEYWORD(SQLParser.SHORT);
          }
        case 243: break;
        case 90: 
          { return BOOLEAN(SQLParser.TRUE, false);
          }
        case 244: break;
        case 134: 
          { return KEYWORD(SQLParser.NUMERIC);
          }
        case 245: break;
        case 135: 
          { return KEYWORD(SQLParser.MAPPING);
          }
        case 246: break;
        case 11: 
          { return VALUECOMPARE('=', NCompareExpr.Operator.EQ);
          }
        case 247: break;
        case 10: 
          { return VALUECOMPARE('<', NCompareExpr.Operator.LT);
          }
        case 248: break;
        case 14: 
          { return KEYWORD('*');
          }
        case 249: break;
        case 57: 
          { return KEYWORD(SQLParser.ALL);
          }
        case 250: break;
        case 156: 
          { return KEYWORD(SQLParser.FOLLOWING);
          }
        case 251: break;
        case 115: 
          { return KEYWORD(SQLParser.EXTEND);
          }
        case 252: break;
        case 62: 
          { return KEYWORD(SQLParser.KEY);
          }
        case 253: break;
        case 83: 
          { return KEYWORD(SQLParser.LOOP);
          }
        case 254: break;
        case 118: 
          { return KEYWORD(SQLParser.DOUBLE);
          }
        case 255: break;
        case 150: 
          { return KEYWORD(SQLParser.MAXCOUNT);
          }
        case 256: break;
        case 119: 
          { return KEYWORD(SQLParser.FIELDS);
          }
        case 257: break;
        case 26: 
          { this.val = new TString(yytext(), yyline, yycolumn, yylength());
		return SQLParser.VAR_REF;
          }
        case 258: break;
        case 104: 
          { return KEYWORD(SQLParser.TABLE);
          }
        case 259: break;
        case 94: 
          { return KEYWORD(SQLParser.NCHAR);
          }
        case 260: break;
        case 15: 
          { return KEYWORD('/');
          }
        case 261: break;
        case 149: 
          { return KEYWORD(SQLParser.MAXLEVEL);
          }
        case 262: break;
        case 142: 
          { return HIERARCHY(SQLParser.CHILDOF, NHierarchyExpr.Keywords.CHILDOF);
          }
        case 263: break;
        case 159: 
          { return KEYWORD(SQLParser.RELATIONS);
          }
        case 264: break;
        case 37: 
          { return KEYWORD(SQLParser.OR);
          }
        case 265: break;
        case 58: 
          { return KEYWORD(SQLParser.ASC);
          }
        case 266: break;
        case 46: 
          { return KEYWORD(SQLParser.INT);
          }
        case 267: break;
        case 81: 
          { return STRCOMPARE(SQLParser.LIKE, NStrCompareExpr.Keywords.LIKE);
          }
        case 268: break;
        case 128: 
          { return KEYWORD(SQLParser.SELECT);
          }
        case 269: break;
        case 53: 
          { return KEYWORD(SQLParser.MAX);
          }
        case 270: break;
        case 36: 
          { return KEYWORD(SQLParser.ON);
          }
        case 271: break;
        case 129: 
          { return KEYWORD(SQLParser.STRING);
          }
        case 272: break;
        case 84: 
          { return KEYWORD(SQLParser.CASE);
          }
        case 273: break;
        case 69: 
          { return KEYWORD(SQLParser.INTO);
          }
        case 274: break;
        case 68: 
          { return KEYWORD(SQLParser.FROM);
          }
        case 275: break;
        case 97: 
          { return KEYWORD(SQLParser.USING);
          }
        case 276: break;
        case 45: 
          { return KEYWORD(SQLParser.FOR);
          }
        case 277: break;
        case 162: 
          { return KEYWORD(SQLParser.PROCEDURE);
          }
        case 278: break;
        case 67: 
          { return KEYWORD(SQLParser.FULL);
          }
        case 279: break;
        case 3: 
          { try {
			long l = Long.parseLong(yytext());
			int i = (int)l;
			if (l == i) {
				this.val = new TInt(i, yyline, yycolumn, yylength());
				return SQLParser.INT_VAL;
			}
			this.val = new TLong(l, yyline, yycolumn, yylength());
			return SQLParser.LONG_VAL;
		} catch (NumberFormatException nfe) {
		    throw new SQLNumberFormatException(yyline, yycolumn, yytext());
		}
          }
        case 280: break;
        case 124: 
          { return KEYWORD(SQLParser.RELATE);
          }
        case 281: break;
        case 93: 
          { return KEYWORD(SQLParser.NTEXT);
          }
        case 282: break;
        case 35: 
          { return KEYWORD(SQLParser.OF);
          }
        case 283: break;
        case 146: 
          { return KEYWORD(SQLParser.RELATION);
          }
        case 284: break;
        case 13: 
          { return KEYWORD('+');
          }
        case 285: break;
        case 131: 
          { return KEYWORD(SQLParser.DEFAULT);
          }
        case 286: break;
        case 157: 
          { return KEYWORD(SQLParser.UNBOUNDED);
          }
        case 287: break;
        case 29: 
          { return VALUECOMPARE(SQLParser.NE, NCompareExpr.Operator.NE);
          }
        case 288: break;
        case 5: 
          { return IDENTIFIER(yytext());
          }
        case 289: break;
        case 112: 
          { return KEYWORD(SQLParser.H_AID);
          }
        case 290: break;
        case 49: 
          { return KEYWORD(SQLParser.ROW);
          }
        case 291: break;
        case 89: 
          { return KEYWORD(SQLParser.JOIN);
          }
        case 292: break;
        case 127: 
          { return KEYWORD(SQLParser.BINARY);
          }
        case 293: break;
        case 21: 
          { throw new SQLValueFormatException(yyline, strColumn + sb.length(), "×Ö·û´®È±ÉÙ½áÊø·û");
          }
        case 294: break;
        case 70: 
          { return KEYWORD(SQLParser.NULL);
          }
        case 295: break;
        case 151: 
          { return KEYWORD(SQLParser.ABSTRACT);
          }
        case 296: break;
        case 34: 
          { return KEYWORD(SQLParser.IS);
          }
        case 297: break;
        case 98: 
          { return KEYWORD(SQLParser.RIGHT);
          }
        case 298: break;
        case 65: 
          { return KEYWORD(SQLParser.DESC);
          }
        case 299: break;
        case 110: 
          { return KEYWORD(SQLParser.WHERE);
          }
        case 300: break;
        case 166: 
          { return KEYWORD(SQLParser.ROW_NUMBER);
          }
        case 301: break;
        case 56: 
          { return KEYWORD(SQLParser.ABO);
          }
        case 302: break;
        case 147: 
          { return KEYWORD(SQLParser.RELATIVE);
          }
        case 303: break;
        case 130: 
          { return KEYWORD(SQLParser.HAVING);
          }
        case 304: break;
        case 168: 
          { return STRCOMPARE(SQLParser.STARTS_WITH, NStrCompareExpr.Keywords.STARTS_WITH);
          }
        case 305: break;
        case 78: 
          { return KEYWORD(SQLParser.BYTE);
          }
        case 306: break;
        case 60: 
          { return KEYWORD(SQLParser.SET);
          }
        case 307: break;
        case 165: 
          { return KEYWORD(SQLParser.DENSE_RANK);
          }
        case 308: break;
        case 139: 
          { return KEYWORD(SQLParser.BOOLEAN);
          }
        case 309: break;
        case 63: 
          { return KEYWORD(SQLParser.ENUM);
          }
        case 310: break;
        case 61: 
          { return KEYWORD(SQLParser.SUM);
          }
        case 311: break;
        case 170: 
          { return HIERARCHY(SQLParser.DESCENDANTOF, NHierarchyExpr.Keywords.DESCENDANTOF);
          }
        case 312: break;
        case 92: 
          { return KEYWORD(SQLParser.INOUT);
          }
        case 313: break;
        case 103: 
          { return KEYWORD(SQLParser.VAVLE);
          }
        case 314: break;
        case 44: 
          { return KEYWORD(SQLParser.END);
          }
        case 315: break;
        case 161: 
          { return KEYWORD(SQLParser.PRECEDING);
          }
        case 316: break;
        case 132: 
          { return KEYWORD(SQLParser.FOREACH);
          }
        case 317: break;
        case 137: 
          { return KEYWORD(SQLParser.VARCHAR);
          }
        case 318: break;
        case 43: 
          { try {
		    this.val = new TDouble(Double.parseDouble(yytext()), yyline, yycolumn, yylength());
			return SQLParser.DOUBLE_VAL;
		} catch (NumberFormatException nfe) {
		    throw new SQLNumberFormatException(yyline, yycolumn, yytext());
		}
          }
        case 319: break;
        case 101: 
          { return KEYWORD(SQLParser.PRINT);
          }
        case 320: break;
        case 102: 
          { return KEYWORD(SQLParser.GROUP);
          }
        case 321: break;
        case 82: 
          { return KEYWORD(SQLParser.LONG);
          }
        case 322: break;
        case 12: 
          { return KEYWORD(',');
          }
        case 323: break;
        case 7: 
          { sb.setLength(0); strColumn = yycolumn; yybegin(STR);
          }
        case 324: break;
        case 136: 
          { return KEYWORD(SQLParser.PRIMARY);
          }
        case 325: break;
        case 79: 
          { return KEYWORD(SQLParser.BLOB);
          }
        case 326: break;
        case 23: 
          { yybegin(YYINITIAL);
		return IDENTIFIER(sb.toString());
          }
        case 327: break;
        case 145: 
          { return KEYWORD(SQLParser.NVARCHAR);
          }
        case 328: break;
        case 125: 
          { return KEYWORD(SQLParser.ROLLUP);
          }
        case 329: break;
        case 54: 
          { return KEYWORD(SQLParser.AND);
          }
        case 330: break;
        case 109: 
          { return KEYWORD(SQLParser.COUNT);
          }
        case 331: break;
        case 126: 
          { return KEYWORD(SQLParser.VALUES);
          }
        case 332: break;
        case 22: 
          { yybegin(YYINITIAL);
		return STRING(sb.toString());
          }
        case 333: break;
        case 96: 
          { return KEYWORD(SQLParser.UNION);
          }
        case 334: break;
        case 160: 
          { return KEYWORD(SQLParser.RECORDSET);
          }
        case 335: break;
        case 38: 
          { return KEYWORD(SQLParser.AS);
          }
        case 336: break;
        case 106: 
          { return KEYWORD(SQLParser.BREAK);
          }
        case 337: break;
        case 64: 
          { return KEYWORD(SQLParser.ELSE);
          }
        case 338: break;
        case 1: 
          { 
          }
        case 339: break;
        case 17: 
          { return KEYWORD('(');
          }
        case 340: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
